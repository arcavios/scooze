name: Continuous Integration

on: [push]

jobs:
    setup-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.setup-matrix.outputs.matrix }}
        steps:
            - id: setup-matrix
              uses: druzsan/setup-matrix@v2
              with:
                  # Use | to preserve valid YAML syntax
                  matrix: |
                      os: ['ubuntu-latest'] # 'macos-latest'
                      python-version: ['3.11', '3.12']
                      # poetry-version: [ "1.7", "1.8" ]
    setup-python:
        runs-on: ubuntu-latest
        steps:
            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
            #----------------------------------------------
            #        load pip cache if cache exists
            #----------------------------------------------
            - uses: actions/cache@v4
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip
                  restore-keys: ${{ runner.os }}-pip
    linting:
        needs: setup-python
        runs-on: ubuntu-latest
        steps:
            #----------------------------------------------
            #          install and run linters
            #----------------------------------------------
            - run: python -m pip install black isort
            - run: |
                  black --version
                  black . --check
                  isort .
    test:
        needs:
            - setup-matrix
            - linting
        strategy:
            fail-fast: true
            matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
        runs-on: ${{ matrix.os }}
        steps:
            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - name: Check out repository
              uses: actions/checkout@v4
            - name: Setup python ${{ matrix.python-version }}
              id: setup-python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  # version: ${{ matrix.poetry-version }}
                  virtualenvs-create: true
                  virtualenvs-in-project: true
            #----------------------------------------------
            #       load cached venv if cache exists
            #----------------------------------------------
            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v4
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            #----------------------------------------------
            # install dependencies if cache does not exist
            #----------------------------------------------
            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root
            #----------------------------------------------
            # install your root project, if required
            #----------------------------------------------
            - name: Install library
              run: poetry install --no-interaction
            #----------------------------------------------
            #    add matrix specifics and run test suite
            #----------------------------------------------
            - name: Run tests
              run: |
                  source .venv/bin/activate
                  pytest -m 'not context' --cov --cov-report='' tests/
                  pytest -m 'context' --cov --cov-append --cov-report='' tests/
                  coverage report
