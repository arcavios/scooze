import logging
import os.path
from typing import Any
from sys import stdout


def get_logger(
    filename: str,
    logger_name: str,
    file_logging_level: int = logging.DEBUG,
    console_logging_level: int = logging.WARNING,
    formatter: logging.Formatter = logging.Formatter("%(asctime)s - %(name)s:%(levelname)s - %(message)s"),
):
    """
    Helper function to get a new logger.

    Parameters:
        filename (str): Filename of the log file.
        logger_name (str): The logger's name.
        file_logging_level (int): Logging level for the log file.
        console_logging_level (int): Logging level for stdout.
        formatter (logging.Formatter): The Formatter to be used in messages generated by this logger.

    Returns:
        logger (logging.Logger): A new logger.
    """

    # Create directory if not exists
    filepath = os.path.join("logs", filename)
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    # Handlers
    fh = logging.FileHandler(filepath, mode="a", encoding="UTF-8", delay=False)
    fh.setLevel(file_logging_level)
    ch = logging.StreamHandler(stdout)
    ch.setLevel(console_logging_level)

    # Formatting
    fh.setFormatter(formatter)
    ch.setFormatter(formatter)

    # Create the logger
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(fh)
    logger.addHandler(ch)

    return logger

# Source:  https://code.activestate.com/recipes/576644-diff-two-dictionaries/#c9
def dict_diff(d1: dict, d2: dict, NO_KEY=0) -> dict[Any, tuple]:
    """
    Helper function to generate a diff between two dicts.

    Parameters:
        d1 (dict): The first dict.
        d2 (dict): The second dict.
        NO_KEY: Default value to use when a key is in one dict, but not the other.

    Returns:
        diff (dict{k: tuple(value, value)}): returns a dict with all keys from both dicts. The values are tuple(v, v) for the values in each dict.
    """

    both = d1.keys() & d2.keys()
    diff = {k:(d1[k], d2[k]) for k in both if d1[k] != d2[k]}
    diff.update({k:(d1[k], NO_KEY) for k in d1.keys() - both})
    diff.update({k:(NO_KEY, d2[k]) for k in d2.keys() - both})
    return diff
